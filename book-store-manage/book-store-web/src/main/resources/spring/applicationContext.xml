<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!-- 启用基于注解的bean -->
    <context:component-scan base-package="com.bs">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>
    <!-- 加载配置文件 -->
    <context:property-placeholder location="classpath:db.properties"/>
    <!-- 数据库连接池 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
        <property name="url" value="${jdbc.url}"/>
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="maxActive" value="10"/>
        <property name="minIdle" value="5"/>
    </bean>
    <!-- Hibernate SessionFactory -->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/> <!-- 数据源 -->
        <property name="packagesToScan" value="com.bs.pojo"/> <!-- 自动扫描实体类 -->
        <!-- Hibernate相关属性配置 -->
        <property name="hibernateProperties">
            <props>
                <!-- 数据库方言 -->
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
                <!-- 显示sql语句 -->
                <prop key="hibernate.show_sql">true</prop>
                <!-- 开启查询缓存 -->
                <!-- 启动"查询缓存"如果想缓存使用findAll()、list()、Iterator()、createCriteria()、createQuery()等方法获得的数据结果集,必须配置此项-->
                <prop key="hibernate.cache.use_query_cache">true</prop>
                <!-- 开启二级缓存 -->
                <prop key="hibernate.cache.use_second_level_cache">true</prop>
                <!-- 设置二级缓存插件EHCache的Provider类 -->
                <prop key="hibernate.cache.provider_class">org.hibernate.cache.ehcache.EhCacheRegionFactory</prop>
                <!-- 高速缓存提供程序 -->
                <!-- 由于spring也使用了EHCache,保证双方都使用同一个缓存管理器 -->
                <prop key="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.EhCacheRegionFactory</prop>
                <!-- 强制Hibernate以更人性化的格式将数据存入二级缓存 -->
                <prop key="hibernate.cache.use_structured_entries">false</prop>
                <!-- Hibernate将收集有助于性能调节的统计数据 -->
                <prop key="hibernate.generate_statistics">false</prop>
            </props>
        </property>
    </bean>
    <!-- Hibernate事务管理器 -->
    <bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <!-- 注入sessionFactory -->
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>
    <!-- 配置基于注解的事务 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>
    <!-- 基于注解的aop -->
    <aop:aspectj-autoproxy/>
</beans>